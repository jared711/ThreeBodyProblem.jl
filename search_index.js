var documenterSearchIndex = {"docs":
[{"location":"util.html#util","page":"Utility functions","title":"Utility functions","text":"","category":"section"},{"location":"util.html","page":"Utility functions","title":"Utility functions","text":"CurrentModule = ThreeBodyProblem","category":"page"},{"location":"util.html#Overview","page":"Utility functions","title":"Overview","text":"","category":"section"},{"location":"util.html","page":"Utility functions","title":"Utility functions","text":"The utility functions are all those functions that didn't fit into the other established categories.","category":"page"},{"location":"util.html#Functions","page":"Utility functions","title":"Functions","text":"","category":"section"},{"location":"util.html","page":"Utility functions","title":"Utility functions","text":"computeR1R2\ncomputer1r2\ncomputeL1\ncomputeL2\ncomputeL3\ncomputeL4\ncomputeL5\ncomputeLpts\ncomputeUeff\ncomputeC","category":"page"},{"location":"util.html#ThreeBodyProblem.computeR1R2","page":"Utility functions","title":"ThreeBodyProblem.computeR1R2","text":" computeR1R2(μ)\n\nCompute the non-dimensional distances of each body from the barycenter given the mass parameter μ {NON}.\n\n\n\n\n\n computeR1R2(sys::System)\n\nCompute the non-dimensional distances of each body from the barycenter given CR3BP system sys.\n\n\n\n\n\ncomputeR1R2(p::Array)\n\nCompute the dimensional distances of each body from the barycenter given p = [μ₁,μ₂,d] {km³/s², km³/s², km} which are the gravitational parameters of the first and second primary bodies and the distance between them.\n\n\n\n\n\n","category":"function"},{"location":"util.html#ThreeBodyProblem.computer1r2","page":"Utility functions","title":"ThreeBodyProblem.computer1r2","text":"computer1r2(rv, μ)\n\nCompute the non-dimensional position vectors of the particle from each body given the state vector rv = [r; v] {NON; NON} and the mass parameter μ {NON}.\n\n\n\n\n\ncomputer1r2(rv, sys::System)\n\nCompute the non-dimensional position vectors of the particle from each body given the state vector rv = [r; v] {NON; NON} and the CR3BP system sys.\n\n\n\n\n\ncomputer1r2(rv, p::Array)\n\nCompute the dimensional position vectors of the particle from each body given p = [μ₁,μ₂,d] {km³/s², km³/s², km} which are the gravitational parameters of the first and second primary bodies and the distance between them.\n\n\n\n\n\n","category":"function"},{"location":"util.html#ThreeBodyProblem.computeL1","page":"Utility functions","title":"ThreeBodyProblem.computeL1","text":"computeL1(μ; tol=1e-15)\n\nCompute position vector of L1 in a normalized CR3BP given the mass parameter μ {NON}.\n\n\n\n\n\ncomputeL1(μ; tol=1e-15)\n\nCompute position vector of L1 in a normalized CR3BP given the CR3BP system sys.\n\n\n\n\n\ncomputeL1(p::Array;tol=1e-15)\n\nCompute position vector of L1 in a non-normalized CR3BP given p = [μ₁,μ₂,d] {km³/s², km³/s², km} which are the gravitational parameters of the first and second primary bodies and the distance between them.\n\n\n\n\n\n","category":"function"},{"location":"util.html#ThreeBodyProblem.computeL2","page":"Utility functions","title":"ThreeBodyProblem.computeL2","text":"computeL2(μ; tol=1e-15)\n\nCompute position vector of L2 in a normalized CR3BP given the mass parameter μ {NON}.\n\n\n\n\n\ncomputeL2(p::Array;tol=1e-15)\n\nCompute 3D L2 in a non-normalized CR3BP given p = [μ₁,μ₂,d], which are the gravitational parameters of the first and second primary bodies [km³/s²]and the distance between them [km].\n\n\n\n\n\n","category":"function"},{"location":"util.html#ThreeBodyProblem.computeL3","page":"Utility functions","title":"ThreeBodyProblem.computeL3","text":"computeL3(μ;tol=1e-15)\n\nCompute position vector of L3 in a normalized CR3BP given the mass parameter μ {NON}.\n\n\n\n\n\ncomputeL3(p::Array;tol=1e-15)\n\nCompute 3D L3 in a non-normalized CR3BP given p = [μ₁,μ₂,d], which are the gravitational parameters of the first and second primary bodies [km³/s²]and the distance between them [km].\n\n\n\n\n\n","category":"function"},{"location":"util.html#ThreeBodyProblem.computeL4","page":"Utility functions","title":"ThreeBodyProblem.computeL4","text":"computeL4(μ; tol=1e-15)\n\nCompute position vector of L4 in a normalized CR3BP given the mass parameter μ {NON}.\n\n\n\n\n\ncomputeL4(p::Array;tol=1e-15)\n\nCompute 3D L4 in a non-normalized CR3BP given p = [μ₁,μ₂,d], which are the gravitational parameters of the first and second primary bodies [km³/s²]and the distance between them [km].\n\n\n\n\n\n","category":"function"},{"location":"util.html#ThreeBodyProblem.computeL5","page":"Utility functions","title":"ThreeBodyProblem.computeL5","text":"computeL5(μ;tol=1e-15)\n\nCompute position vector of L5 in a normalized CR3BP given the mass parameter μ {NON}.\n\n\n\n\n\ncomputeL5(p::Array;tol=1e-15)\n\nCompute 3D L5 in a non-normalized CR3BP given p = [μ₁,μ₂,d], which are the gravitational parameters of the first and second primary bodies [km³/s²]and the distance between them [km].\n\n\n\n\n\n","category":"function"},{"location":"util.html#ThreeBodyProblem.computeLpts","page":"Utility functions","title":"ThreeBodyProblem.computeLpts","text":"computeLpts(μ;tol=1e-15)\n\nCompute 3D Lagrange points in a normalized CR3BP given μ, the system mass parameter.\n\n\n\n\n\ncomputeLpts(sys::System;tol=1e-15)\n\nCompute 3D Lagrange points in a non-normalized CR3BP given system S.\n\n\n\n\n\ncomputeLpts(p::Array;tol=1e-15)\n\nCompute 3D Lagrange points in a non-normalized CR3BP given p = [μ₁,μ₂,d], which are the gravitational parameters of the first and second primary bodies [km³/s²]and the distance between them [km].\n\n\n\n\n\n","category":"function"},{"location":"util.html#ThreeBodyProblem.computeUeff","page":"Utility functions","title":"ThreeBodyProblem.computeUeff","text":"computeUeff(rv,μ)\n\nCompute effective potential given normalized state rv {NON} and mass parameter μ {NON}.\n\n\n\n\n\ncomputeUeff(rv,sys::System)\n\nCompute effective potential given state rv = [r; v]{km; km/s} and CR3BP systemsys`.\n\n\n\n\n\ncomputeUeff(rv,p::Array)\n\nCompute effective potential given state rv = [r; v]{km; km/s} andp = [μ₁,μ₂,d]` {km³/s²; km³/s²; km}, which are the gravitational parameters of the first and second primary bodies and the distance between them.\n\n\n\n\n\n","category":"function"},{"location":"util.html#ThreeBodyProblem.computeC","page":"Utility functions","title":"ThreeBodyProblem.computeC","text":"computeC(rv,μ)\n\nCompute Jacobi constant given normalized state rv {NON} and mass parameter {NON}\n\n\n\n\n\ncomputeC(rv,sys::System)\n\nCompute Jacobi constant given normalized state rv {NON} and system\n\n\n\n\n\ncomputeC(rv,p::Array)\n\nCompute Jacobi constant given state rv = [r; v] {km; km/s} and p = [μ₁,μ₂,d], which are the gravitational parameters of the first and second primary bodies [km³/s²] and the distance between them [km].\n\n\n\n\n\n","category":"function"},{"location":"frames.html#frames","page":"Frames","title":"Frames","text":"","category":"section"},{"location":"frames.html","page":"Frames","title":"Frames","text":"CurrentModule = ThreeBodyProblem","category":"page"},{"location":"frames.html","page":"Frames","title":"Frames","text":"Pages = [\"frames.md\"]","category":"page"},{"location":"frames.html#Overview","page":"Frames","title":"Overview","text":"","category":"section"},{"location":"frames.html","page":"Frames","title":"Frames","text":"The most important frame conversion when dealing with the Circular Restricted Three-Body Problem (CR3BP) is between the rotating and inertial frames.","category":"page"},{"location":"frames.html#Functions","page":"Frames","title":"Functions","text":"","category":"section"},{"location":"frames.html","page":"Frames","title":"Frames","text":"rot2inert\nrot2inert!\ninert2rot\ninert2rot!\nenu2ecef\necef2enu\necef2eci\neci2ecef\neci2sci\nsci2eci\ndimensionalize,\ndimensionalize!,\nnondimensionalize,\nnondimensionalize!","category":"page"},{"location":"frames.html#ThreeBodyProblem.rot2inert","page":"Frames","title":"ThreeBodyProblem.rot2inert","text":"rot2inert(rv, θ, μ; origin=:barycenter)\n\nConvert state vector rv = [r; v] {NON; NON} from rotating (synodic) frame to inertial frame in the normalized CR3BP given time θ {NON} and mass parameter μ {NON}.\n\n\n\n\n\nrot2inert(rv, θ, sys::System; origin=:barycenter)\n\nConvert state vector rv = [r; v] {NON; NON} from rotating (synodic) frame to inertial frame in the normalized CR3BP given time θ {NON} and CR3BP system sys.\n\n\n\n\n\nrot2inert(rv, θ, p::Array; origin=:barycenter)\n\nConvert state vector rv = [r; v] {NON; NON} from rotating (synodic) frame to inertial frame in the non-normalized CR3BP given time θ {NON} and p = [μ₁;μ₂;d]` {km³/s²; km³/s²; km}, which contains the gravitational parameters of the first and second primary bodies as well as the distance between them.\n\n\n\n\n\n","category":"function"},{"location":"frames.html#ThreeBodyProblem.rot2inert!","page":"Frames","title":"ThreeBodyProblem.rot2inert!","text":"rot2inert!(rv, θ, μ)\n\nIn-place version of rot2inert(rv, θ, μ)\n\n\n\n\n\nrot2inert!(rv, θ, sys::System)\n\nIn-place version of rot2inert(rv, θ, sys::System)\n\n\n\n\n\nrot2inert!(rv, θ, p::Array)\n\nIn-place version of rot2inert(rv, θ, p::Array)\n\n\n\n\n\n","category":"function"},{"location":"frames.html#ThreeBodyProblem.inert2rot","page":"Frames","title":"ThreeBodyProblem.inert2rot","text":"inert2rot(rv, θ, μ)\n\nInertial frame to rotating (synodic) frame\n\n\n\n\n\ninert2rot(rv, θ, sys::System)\n\nInertial frame to rotating (synodic) frame\n\n\n\n\n\ninert2rot(rv, θ, p::Array)\n\nInertial frame to rotating (synodic) frame\n\n\n\n\n\n","category":"function"},{"location":"frames.html#ThreeBodyProblem.inert2rot!","page":"Frames","title":"ThreeBodyProblem.inert2rot!","text":"inert2rot!(rv, t, μ)\n\nIn-place version of inert2rot(rv, t, μ).\n\n\n\n\n\ninert2rot!(rv, t, sys::System)\n\nIn-place version of inert2rot(rv, t, sys::System).\n\n\n\n\n\ninert2rot!(rv, t, p::Array)\n\nIn-place version of inert2rot(rv, t, p::Array).\n\n\n\n\n\n","category":"function"},{"location":"frames.html#ThreeBodyProblem.enu2ecef","page":"Frames","title":"ThreeBodyProblem.enu2ecef","text":"enu2ecef(rv_enu, ϕ, λ, h=0; geodetic=true, ang_unit=:deg)\n\nConverts state from ENU frame to inertial frame\n\n\n\n\n\n","category":"function"},{"location":"frames.html#ThreeBodyProblem.ecef2enu","page":"Frames","title":"ThreeBodyProblem.ecef2enu","text":"ecef2enu(rv_ecef, ϕ, λ, h=0; geodetic=true, ang_unit::Symbol=:deg, e_earth=0.0818, r_earth=6.378136e3)\n\nConverts state from ENU frame to inertial frame\n\n\n\n\n\n","category":"function"},{"location":"frames.html#ThreeBodyProblem.ecef2eci","page":"Frames","title":"ThreeBodyProblem.ecef2eci","text":"ecef2eci(rv_ecef, θ; ω=7.292115373194e-5, ang_unit::Symbol=:rad)\n\nConvert state vector rv = [r; v] {km; km/s} from Earth-Centered Earth-Fixed (ECEF) frame to Earth-Centered Inertial (ECI) frame given Greenwich Mean Sidereal Time (GMST) θ {rad}.\n\n\n\n\n\n","category":"function"},{"location":"frames.html#ThreeBodyProblem.eci2ecef","page":"Frames","title":"ThreeBodyProblem.eci2ecef","text":"ecef2eci(rv_ecef, θ; ω=7.292115373194e-5, ang_unit::Symbol=:rad)\n\nConvert state vector rv = [r; v] {km; km/s} from Earth-Centered Inertial (ECI) frame to Earth-Centered Earth-Fixed (ECEF) frame given Greenwich Mean Sidereal Time (GMST) θ {rad}.\n\n\n\n\n\n","category":"function"},{"location":"frames.html#ThreeBodyProblem.eci2sci","page":"Frames","title":"ThreeBodyProblem.eci2sci","text":"eci2sci(rv_eci, rv_sun_eci; ε=23.43929)\n\n\n\n\n\n","category":"function"},{"location":"frames.html#ThreeBodyProblem.sci2eci","page":"Frames","title":"ThreeBodyProblem.sci2eci","text":"sci2eci(rv_sci, rv_sun_eci; ε=23.439292)\n\n\n\n\n\n","category":"function"},{"location":"constants.html#constants","page":"Constants","title":"Constants","text":"","category":"section"},{"location":"constants.html","page":"Constants","title":"Constants","text":"CurrentModule = ThreeBodyProblem","category":"page"},{"location":"constants.html#Overview","page":"Constants","title":"Overview","text":"","category":"section"},{"location":"constants.html","page":"Constants","title":"Constants","text":"These constants are defined globally in the module. We use the kilometer (km) as the base unit of distance, the kilogram (kg) as the base unit of mass, and the second (s) as the base unit of time.","category":"page"},{"location":"constants.html#Functions","page":"Constants","title":"Functions","text":"","category":"section"},{"location":"constants.html","page":"Constants","title":"Constants","text":"JD\nJY\nAU\nG","category":"page"},{"location":"constants.html#ThreeBodyProblem.JD","page":"Constants","title":"ThreeBodyProblem.JD","text":"JD\n\nOne Julian Day is equal to exactly 86400 seconds\n\n\n\n\n\n","category":"constant"},{"location":"constants.html#ThreeBodyProblem.JY","page":"Constants","title":"ThreeBodyProblem.JY","text":"JY\n\nOne Julian Year is equal to exactly 365.25 Julian Days or 31,557,600 seconds\n\n\n\n\n\n","category":"constant"},{"location":"constants.html#ThreeBodyProblem.AU","page":"Constants","title":"ThreeBodyProblem.AU","text":"AU\n\nOne Astronomical Unit is equal to exactly 1.495978707e8 km\n\n\n\n\n\n","category":"constant"},{"location":"constants.html#ThreeBodyProblem.G","page":"Constants","title":"ThreeBodyProblem.G","text":"G\n\nThe universal gravitational constant is approximately equal to 6.7430e-20 km³/(kg*s²)\n\n\n\n\n\n","category":"constant"},{"location":"dynamics.html#dynamics","page":"Dynamics","title":"Dynamics","text":"","category":"section"},{"location":"dynamics.html","page":"Dynamics","title":"Dynamics","text":"CurrentModule = ThreeBodyProblem","category":"page"},{"location":"dynamics.html#Overview","page":"Dynamics","title":"Overview","text":"","category":"section"},{"location":"dynamics.html","page":"Dynamics","title":"Dynamics","text":"The dynamics functions give the time derivative of a state in specific systems and are of the form ẋ = f(x). Corresponding in-place methods have names that end with !.","category":"page"},{"location":"dynamics.html#Functions","page":"Dynamics","title":"Functions","text":"","category":"section"},{"location":"dynamics.html","page":"Dynamics","title":"Dynamics","text":"R2BPdynamics\nR2BPdynamics!\nCR3BPdynamics\nCR3BPdynamics!\nCR3BPstm\nCR3BPstm!\nCR3BPinert\nCR3BPinert!\nCWdynamics\nCWdynamics!\nBCPdynamics\nBCPdynamics!\nBCPstm\nBCPstm!","category":"page"},{"location":"dynamics.html#ThreeBodyProblem.R2BPdynamics","page":"Dynamics","title":"ThreeBodyProblem.R2BPdynamics","text":"R2BPdynamics(rv, μ, t)\n\nCompute time derivative of state vector in the restricted two-body system. rv is the state vector [r; v] {km; km/s}, μ is the gravitational parameter {km³/s²}, and t is time {s}.\n\n\n\n\n\nR2BPdynamics(rv, prim::Body, t)\n\nCompute time derivative of state vector in the restricted two-body system. rv is the state vector [r; v] {km; km/s}, prim is the central body, and t is time {s}.\n\n\n\n\n\n","category":"function"},{"location":"dynamics.html#ThreeBodyProblem.R2BPdynamics!","page":"Dynamics","title":"ThreeBodyProblem.R2BPdynamics!","text":"R2BPdynamics!(rvdot, rv, μ, t)\n\nIn-place version of R2BPdynamics(rvdot, rv, μ, t).\n\n\n\n\n\nR2BPdynamics!(rvdot, rv, prim::Body, t)\n\nIn-place version of R2BPdynamics!(rvdot, rv, prim::Body, t).\n\n\n\n\n\n","category":"function"},{"location":"dynamics.html#ThreeBodyProblem.CR3BPdynamics","page":"Dynamics","title":"ThreeBodyProblem.CR3BPdynamics","text":"CR3BPdynamics(rv, μ, t)\n\nCompute time derivative of state vector rv = [r; v] {NON, NON} in the rotating frame of the normalized CR3BP where μ is the CR3BP mass parameter μ₂/(μ₁+μ₂) {NON} and t is time {NON}.\n\n\n\n\n\nCR3BPdynamics(rv, sys::System, t)\n\nCompute time derivative of state vector rv = [r; v] {NON, NON} in the rotating frame of the normalized CR3BP where sys is the CR3BP system and t is time {NON}.\n\n\n\n\n\nCR3BPdynamics(rv, p::Array, t)\n\nCompute time derivative of state vector rv = [r; v] {km, km/s} in the rotating frame of the non-normalized CR3BP where p = [μ₁;μ₂;d] {km³/s²; km³/s²; km} contains the gravitational parameters of the first and second primary bodies as well as the distance between them. t is time {s}.\n\n\n\n\n\n","category":"function"},{"location":"dynamics.html#ThreeBodyProblem.CR3BPdynamics!","page":"Dynamics","title":"ThreeBodyProblem.CR3BPdynamics!","text":"CR3BPdynamics!(rvdot, rv, μ, t)\n\nIn-place version of CR3BPdynamics(rv, μ, t).\n\n\n\n\n\nCR3BPdynamics!(rvdot, rv, sys::System, t)\n\nIn-place version of CR3BPdynamics(rv, sys::System, t).\n\n\n\n\n\nCR3BPdynamics!(rvdot, rv, p::Array, t)\n\nIn-place version of CR3BPdynamics(rv, p::Array, t).\n\n\n\n\n\n","category":"function"},{"location":"dynamics.html#ThreeBodyProblem.CR3BPstm","page":"Dynamics","title":"ThreeBodyProblem.CR3BPstm","text":"CR3BPstm(w, μ, t)\n\nCompute time derivative of state vector w = [r; v; vec(Φ)] {NON; NON; NON} in the rotating frame of the normalized CR3BP. vec(Φ) is the vectorized state transition matrix while μ is the CR3BP mass parameter μ₂/(μ₁+μ₂) {NON} and t is time {NON}.\n\n\n\n\n\nCR3BPstm(w, sys, t)\n\nCompute time derivative of state vector w = [r; v; vec(Φ)] {NON; NON; NON} in the rotating frame of the normalized CR3BP. vec(Φ) is the vectorized state transition matrix while sys is the CR3BP system and t is time {NON}.\n\n\n\n\n\n","category":"function"},{"location":"dynamics.html#ThreeBodyProblem.CR3BPstm!","page":"Dynamics","title":"ThreeBodyProblem.CR3BPstm!","text":"CR3BPstm!(wdot, w, μ, t)\n\nIn-place version of CR3BPstm(w, μ, t).\n\n\n\n\n\nCR3BPstm!(wdot, w, sys::System, t)\n\nIn-place version of CR3BPstm(w, sys::System, t).\n\n\n\n\n\n","category":"function"},{"location":"dynamics.html#ThreeBodyProblem.CR3BPinert","page":"Dynamics","title":"ThreeBodyProblem.CR3BPinert","text":"CR3BPinert(rv,μ,t)\n\nCompute time derivative of state vector rv = [r; v] {NON, NON} in the inertial frame of the normalized CR3BP where μ is the CR3BP mass parameter μ₂/(μ₁+μ₂) {NON} and t is time {NON}.\n\n\n\n\n\nCR3BPinert(rv, sys::System, t)\n\nCompute time derivative of state vector rv = [r; v] {NON, NON} in the inertial frame of the normalized CR3BP where sys is the CR3BP system and t is time {NON}.\n\n\n\n\n\nCR3BPinert(rvdot, rv, p::Array, t)\n\nCompute time derivative of state vector rv = [r; v] {NON, NON} in the inertial frame of the non-normalized CR3BP where p = [μ₁;μ₂;d] {km³/s²; km³/s²; km} contains the gravitational parameters of the first and second primary bodies as well as the distance between them. t is time {s}.\n\n\n\n\n\n","category":"function"},{"location":"dynamics.html#ThreeBodyProblem.CR3BPinert!","page":"Dynamics","title":"ThreeBodyProblem.CR3BPinert!","text":"CR3BPinert!(rvdot, rv, μ, t)\n\nIn-place version of CR3BPinert(rv, μ, t).\n\n\n\n\n\nCR3BPinert!(rvdot, rv, sys::System, t)\n\nIn-place version of CR3BPinert(rv, sys::System, t).\n\n\n\n\n\nCR3BPinert!(rvdot, rv, p::Array, t)\n\nIn-place version of CR3BPinert(rv, p::Array, t).\n\n\n\n\n\n","category":"function"},{"location":"dynamics.html#ThreeBodyProblem.CWdynamics","page":"Dynamics","title":"ThreeBodyProblem.CWdynamics","text":"CWdynamics(rv, n, t)\n\nClohessy-Wiltshire equations. Compute time derivative of state vector rv = [δr; δv] {km; km/s} where n {rad/s} is the mean motion of the chief and t is time {s}.\n\n\n\n\n\n","category":"function"},{"location":"dynamics.html#ThreeBodyProblem.CWdynamics!","page":"Dynamics","title":"ThreeBodyProblem.CWdynamics!","text":"CWdynamics!(rvdot,rv,n,t)\n\nClohessy-Wiltshire equations\n\nInputs: n (scalar) mean motion\n\n\n\n\n\n","category":"function"},{"location":"dynamics.html#ThreeBodyProblem.BCPdynamics","page":"Dynamics","title":"ThreeBodyProblem.BCPdynamics","text":"See G. Gómez, C. Simó, J. Llibre, and R. Martínez, Dynamics and mission design near libration points. Vol. II, vol. 3. 2001.\n\nBCPdynamics(rv, μ, m₃, n₃, t)\n\nCompute time derivative of state vector rv = [r; v] {km; km/s} in the normalized Bicircular Four-Body Problem (BCP). μ {NON} is the BCP mass parameter and m₃ {NON} and n₃ {NON} are the normalized mass and mean motion of the tertiary body. t is time {NON}.\n\n\n\n\n\nBCPdynamics(rv, sys::BicircularSystem, t)\n\nCompute time derivative of state vector rv = [r; v] {km; km/s} in the normalized Bicircular Four-Body Problem (BCP). sys is the BCP system and t is time {NON}.\n\n\n\n\n\n","category":"function"},{"location":"dynamics.html#ThreeBodyProblem.BCPdynamics!","page":"Dynamics","title":"ThreeBodyProblem.BCPdynamics!","text":"BCPdynamics!(rvdot, rv, μ, m₃, n₃, t)\n\nIn-place version of BCPdynamics(rv, μ, m₃, n₃, t).\n\n\n\n\n\nBCPdynamics!(rvdot, rv, sys::BicircularSystem, t)\n\nIn-place version of BCPdynamics(rv, sys::BicircularSystem, t).\n\n\n\n\n\n","category":"function"},{"location":"dynamics.html#ThreeBodyProblem.BCPstm","page":"Dynamics","title":"ThreeBodyProblem.BCPstm","text":"BCPstm(wdot, w, μ, m₃, n₃, t)\n\nCompute time derivative of state vector w = [r; v; vec(Φ)] {NON; NON; NON} in the normalized Bicircular Four-Body Problem (BCP). vec(Φ) is the vectorized state transition matrix. μ {NON} is the BCP mass parameter and m₃ {NON} and n₃ {NON} are the normalized mass and mean motion of the tertiary body. t is time {NON}.\n\n\n\n\n\nBCPstm(wdot, w, μ, m₃, n₃, t)\n\nCompute time derivative of state vector w = [r; v; vec(Φ)] {NON; NON; NON} in the normalized Bicircular Four-Body Problem (BCP). vec(Φ) is the vectorized state transition matrix, sys is the BCP system and t is time {NON}.\n\n\n\n\n\n","category":"function"},{"location":"dynamics.html#ThreeBodyProblem.BCPstm!","page":"Dynamics","title":"ThreeBodyProblem.BCPstm!","text":"BCPstm!(wdot, w, μ, m₃, n₃, t)\n\nIn-place version of BCPstm(w, μ, m₃, n₃, t).\n\n\n\n\n\nBCPstm!(wdot, w, sys::BicircularSystem, t)\n\nIn-place version of BCPstm(w, sys::BicircularSystem, t).\n\n\n\n\n\n","category":"function"},{"location":"orbitalelements.html#orbitalelements","page":"Orbital Elements","title":"Orbital Elements","text":"","category":"section"},{"location":"orbitalelements.html","page":"Orbital Elements","title":"Orbital Elements","text":"CurrentModule = ThreeBodyProblem","category":"page"},{"location":"orbitalelements.html","page":"Orbital Elements","title":"Orbital Elements","text":"Pages = [\"orbitalelements.md\"]","category":"page"},{"location":"orbitalelements.html#Overview","page":"Orbital Elements","title":"Overview","text":"","category":"section"},{"location":"orbitalelements.html","page":"Orbital Elements","title":"Orbital Elements","text":"The classical Keplerian orbital elements are a e i Ω ω ν. While these are the most well-known and commonly used in the astrodynamics community, they are not the only way to describe an orbit. We are also working on including two-line elements and Delaunay variables.","category":"page"},{"location":"orbitalelements.html#Functions","page":"Orbital Elements","title":"Functions","text":"","category":"section"},{"location":"orbitalelements.html","page":"Orbital Elements","title":"Orbital Elements","text":"AP2a\nfindrP","category":"page"},{"location":"orbitalelements.html#ThreeBodyProblem.AP2a","page":"Orbital Elements","title":"ThreeBodyProblem.AP2a","text":"AP2a(rA, rP)\n\nCompute the semimajor axis given apoapsis and periapsis distances rA and rP.\n\n\n\n\n\n","category":"function"},{"location":"orbitalelements.html#ThreeBodyProblem.findrP","page":"Orbital Elements","title":"ThreeBodyProblem.findrP","text":"computeq(rv::Array,p::Array)\n\ncomputeq\n\n\n\n\n\n","category":"function"},{"location":"index.html#introduction","page":"Introduction","title":"ThreeBodyProblem.jl Documentation","text":"","category":"section"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"CurrentModule = ThreeBodyProblem","category":"page"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"This package is based on methods and theory taught in Stanford University's AA279 class series. There are also functions related to the dynamical systems work of Martin Lo from JPL.","category":"page"},{"location":"index.html#Outline","page":"Introduction","title":"Outline","text":"","category":"section"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"","category":"page"},{"location":"index.html#Index-of-all-types,-methods,-and-constants","page":"Introduction","title":"Index of all types, methods, and constants","text":"","category":"section"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"","category":"page"},{"location":"parameters.html#parameters","page":"Parameters","title":"Parameters","text":"","category":"section"},{"location":"parameters.html","page":"Parameters","title":"Parameters","text":"CurrentModule = ThreeBodyProblem","category":"page"},{"location":"parameters.html","page":"Parameters","title":"Parameters","text":"Pages = [\"parameters.md\"]","category":"page"},{"location":"parameters.html#Overview","page":"Parameters","title":"Overview","text":"","category":"section"},{"location":"parameters.html","page":"Parameters","title":"Parameters","text":"The user has control over the parameters defining the primary bodies as well as the system as a whole. We have also included some convenience functions for quickly defining common systems.","category":"page"},{"location":"parameters.html#Functions","page":"Parameters","title":"Functions","text":"","category":"section"},{"location":"parameters.html","page":"Parameters","title":"Parameters","text":"Body\nSystem\nset_system\nsun_mercury\nsun_venus\nsun_earth\nearth_moon\nsun_mars\nsun_jupiter\nsun_saturn\nsun_uranus\nsun_neptune\njupiter_europa\nsaturn_enceladus","category":"page"},{"location":"parameters.html#ThreeBodyProblem.Body","page":"Parameters","title":"ThreeBodyProblem.Body","text":"Body(m, R, a, T, name, color)\nBody(m, R, a, T, name)\nBody(m, R, a, T)\n\nA planet, moon, or other gravitationally significant object m::Float64      # mass {kg} R::Float64      # mean radius {km} a::Float64      # mean semimajor axis about parent body {km} T::Float64      # sidereal orbital period {s} name::String    # name of body (e.g. \"Earth\") color::Symbol   # color of the body for plotting\n\n\n\n\n\n","category":"type"},{"location":"parameters.html#ThreeBodyProblem.System","page":"Parameters","title":"ThreeBodyProblem.System","text":"System(prim, sec, μ₁, μ₂, μ, d, R₁, R₂, T, RUNIT, VUNIT, TUNIT, name)\nSystem(prim::Body, sec::Body)\n\nA Circular Restricted Three-Body Problem System defined by primary and secondary bodies (prim and sec) prim::Body      # Primary body sec::Body       # Secondary body μ₁::Float64     # {km^3/s^2} gravitational parameter of primary body μ₂::Float64     # {km^3/s^2} gravitational parameter of secondary body μ::Float64      # {} mass parameter d::Float64      # {km} average distance between two primaries R₁::Float64     # {km} Radius of primary body R₂::Float64     # {km} Radius of secondary Body T::Float64      # {s} sidereal orbital period RUNIT::Float64  # {km} distance normalizing parameter VUNIT::Float64  # {km/s} velocity normalizing parameter TUNIT::Float64  # {s} time normalizing parameter name::String    # name of system (e.g. \"Earth/Moon\")\n\n\n\n\n\n","category":"type"},{"location":"parameters.html#ThreeBodyProblem.sun_mercury","page":"Parameters","title":"ThreeBodyProblem.sun_mercury","text":"sun_mercury()\n\n\n\n\n\n","category":"function"},{"location":"parameters.html#ThreeBodyProblem.sun_venus","page":"Parameters","title":"ThreeBodyProblem.sun_venus","text":"sun_venus()\n\n\n\n\n\n","category":"function"},{"location":"parameters.html#ThreeBodyProblem.sun_earth","page":"Parameters","title":"ThreeBodyProblem.sun_earth","text":"sun_earth()\n\n\n\n\n\n","category":"function"},{"location":"parameters.html#ThreeBodyProblem.earth_moon","page":"Parameters","title":"ThreeBodyProblem.earth_moon","text":"earth_moon()\n\n\n\n\n\n","category":"function"},{"location":"parameters.html#ThreeBodyProblem.sun_mars","page":"Parameters","title":"ThreeBodyProblem.sun_mars","text":"sun_mars()\n\n\n\n\n\n","category":"function"},{"location":"parameters.html#ThreeBodyProblem.sun_jupiter","page":"Parameters","title":"ThreeBodyProblem.sun_jupiter","text":"sun_jupiter()\n\n\n\n\n\n","category":"function"},{"location":"parameters.html#ThreeBodyProblem.sun_saturn","page":"Parameters","title":"ThreeBodyProblem.sun_saturn","text":"sun_saturn()\n\n\n\n\n\n","category":"function"},{"location":"parameters.html#ThreeBodyProblem.sun_uranus","page":"Parameters","title":"ThreeBodyProblem.sun_uranus","text":"sun_uranus()\n\n\n\n\n\n","category":"function"},{"location":"parameters.html#ThreeBodyProblem.sun_neptune","page":"Parameters","title":"ThreeBodyProblem.sun_neptune","text":"sun_neptune()\n\n\n\n\n\n","category":"function"},{"location":"parameters.html#ThreeBodyProblem.jupiter_europa","page":"Parameters","title":"ThreeBodyProblem.jupiter_europa","text":"jupiter_europa()\n\n\n\n\n\n","category":"function"},{"location":"parameters.html#ThreeBodyProblem.saturn_enceladus","page":"Parameters","title":"ThreeBodyProblem.saturn_enceladus","text":"saturn_enceladus()\n\n\n\n\n\n","category":"function"},{"location":"example.html#example","page":"Examples","title":"Examples","text":"","category":"section"},{"location":"example.html","page":"Examples","title":"Examples","text":"CurrentModule = ThreeBodyProblem","category":"page"},{"location":"example.html#Overview","page":"Examples","title":"Overview","text":"","category":"section"},{"location":"example.html","page":"Examples","title":"Examples","text":"The examples shown here demonstrate the type of problems ThreeBodyProblem.jl can be used for. While this documentation includes simple use cases for most functions, we find it helpful to see mutliple functions used in the same script to see how data types and structures fit together.","category":"page"},{"location":"example.html","page":"Examples","title":"Examples","text":"Examples","category":"page"}]
}
